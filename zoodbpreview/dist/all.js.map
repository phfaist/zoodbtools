{"mappings":"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","sources":["zoodbpreview/all.js","zoodbpreview/ZooDbPreviewComponent.jsx","zoodbpreview/citationapiplaceholder.js","zoodbpreview/renderFlm.js"],"sourcesContent":["export { ZooDbPreviewComponent } from './ZooDbPreviewComponent.jsx';\nexport { CitationSourceApiPlaceholder } from './citationapiplaceholder.js';\nexport { installFlmContentStyles, simpleRenderObjectWithFlm } from './renderFlm.js';\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbPreviewComponent');\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\n\nimport './ZooDbPreviewComponent_style.scss';\n\n\n\n\n\n// -----------------------------------------------------------------------------\n\n\n\nexport function ZooDbPreviewComponent(props)\n{\n    let {\n        zoodb,\n        renderObject,\n        objectType,\n        objectId,\n        getMathJax,\n        installFlmObjectLinkCallback,\n    } = props;\n\n    objectType ||= \"\";\n    objectId ||= \"\";\n\n    // React states and effects --\n\n    const [ selectedObjectTypeAndId, setSelectedObjectTypeAndId ] = useState(\n        {\n            selectedObjectType: objectType,\n            selectedObjectId: objectId,\n        }\n    );\n\n    const renderContentDomNodeRef = useRef(null);\n\n    useEffect(\n        () => {\n            const domNode = renderContentDomNodeRef.current;\n\n            //\n            // scroll to the top of the preview pane\n            //\n            domNode.scrollTo({top: 0});\n\n            //\n            // render math if applicable\n            //\n            if (!getMathJax) {\n                return;\n            }\n            const MJ = getMathJax();\n            if (MJ) {\n                MJ.typesetPromise([domNode]);\n            }\n\n            return;\n        },\n        [ selectedObjectTypeAndId ]\n    );\n\n    // useful callbacks --\n    \n    const { selectedObjectType, selectedObjectId } = selectedObjectTypeAndId;\n    const setSelectedObjectType = (newObjectType) => setSelectedObjectTypeAndId({\n        selectedObjectType: newObjectType,\n        selectedObjectId: \"\"\n    });\n    const setSelectedObjectId = (newObjectId) => setSelectedObjectTypeAndId({\n        selectedObjectType,\n        selectedObjectId: newObjectId,\n    });\n    const setSelectedPairTypeId = (selectedObjectType, selectedObjectId) =>\n          setSelectedObjectTypeAndId({selectedObjectType, selectedObjectId}) ;\n\n    if (installFlmObjectLinkCallback) {\n        const [ callbackHolder, callbackMethod ] = installFlmObjectLinkCallback;\n        callbackHolder[callbackMethod] = (objType, objId) => {\n            console.log(`Loading preview component → ${objType} ${objId}`);\n            setSelectedPairTypeId(objType, objId);\n        };\n    }\n\n    // render --\n\n    let allObjectTypes = Object.keys(zoodb.objects);\n    allObjectTypes.sort();\n\n    let selectObjectTypeOptions = allObjectTypes.map(\n        (x) => ({ value: x, label: x })\n    );\n    selectObjectTypeOptions.push(\n        { value: \"\", label: \"(select object type)\" }\n    )\n\n    let selectObjectIdOptions = [];\n    if (selectedObjectType && zoodb.objects[selectedObjectType]) {\n        let allObjectIds = Object.keys(zoodb.objects[selectedObjectType]);\n        allObjectIds.sort();\n\n        selectObjectIdOptions = allObjectIds.map(\n            (x) => ({ value: x, label: x })\n        );\n    }\n    selectObjectIdOptions.push(\n        { value: \"\", label: \"(select object)\" }\n    );\n\n    debug(`Rendering component, selected ${selectedObjectType} ‘${selectedObjectId}’`);\n\n    let previewHtml = '';\n\n    let object = null;\n    if (selectedObjectType && selectedObjectId && zoodb.objects[selectedObjectType]) {\n        object = zoodb.objects[selectedObjectType][selectedObjectId];\n    }\n    if (object) {\n        previewHtml = renderObject(zoodb, selectedObjectType, selectedObjectId, object);\n        debug(`Rendered HTML -> `, previewHtml);\n    }\n\n    return (\n        <div className=\"ZooDbPreviewComponent\">\n            <Select\n                className=\"zoodb-preview-select-objecttype\"\n                value={{value: selectedObjectType, label: selectedObjectType}}\n                onChange={(newValue) => setSelectedObjectType(newValue.value)}\n                options={selectObjectTypeOptions}\n            />\n            <Select\n                className=\"zoodb-preview-select-objectid\"\n                value={{value: selectedObjectId, label: selectedObjectId }}\n                onChange={(newValue) => setSelectedObjectId(newValue.value)}\n                options={selectObjectIdOptions}\n            />\n            <div className=\"zoodb-preview-content\"\n                 ref={renderContentDomNodeRef}\n                 dangerouslySetInnerHTML={ {__html: previewHtml} }\n            >\n            </div>\n        </div>\n    );\n}\n","import { CitationSourceBase } from '@phfaist/zoodb/citationmanager/source/base';\n\n\nexport class CitationSourceApiPlaceholder extends CitationSourceBase\n{\n    constructor(options)\n    {\n        options ||= {};\n\n        const override_options = {\n            source_name: `${options.title} (placeholder)`,\n            chunk_size: Infinity,\n            chunk_retrieve_delay_ms: 0,\n\n            cache_store_options: {\n                    cache_duration_ms: 0,\n            },\n        };\n        const default_options = {\n            cite_prefix: options.cite_prefix,\n        };\n\n        super(\n            override_options,\n            options,\n            default_options,\n        );\n    }\n\n    async run_retrieve_chunk(id_list)\n    {\n        for (let cite_key of id_list) {\n            cite_key = cite_key.trim();\n            const cite_key_encoded = encodeURIComponent(cite_key);\n\n            let flm_text = `${this.options.title} \\\\verbcode{${cite_key}}`\n\n            let test_url = this.options.test_url(this.cite_prefix, cite_key);\n            if (test_url) {\n                flm_text += ` — \\\\href{${test_url}}{TEST→}`;\n            }\n\n            // clean up the data a bit, we don't need the full list of references (!)\n            let csljsondata = {\n                _ready_formatted: {\n                    flm: flm_text,\n                }\n            };\n\n            this.citation_manager.store_citation(\n                this.cite_prefix, cite_key, csljsondata, this.cache_store_options\n            );\n        }\n    }\n    \n}\n","import debugm from 'debug';\nconst debug = debugm('zoodbpreview.renderFlm');\n\nimport * as zooflm from '@phfaist/zoodb/zooflm';\nimport { getfield } from '@phfaist/zoodb/util/getfield';\nimport { iter_object_fields_recursive } from '@phfaist/zoodb/util/objectinspector';\nimport { sqzhtml } from '@phfaist/zoodb/util/sqzhtml';\n\n// -----------------------------------------------------------------------------\n\n\nexport function installFlmContentStyles(documentObject)\n{\n    documentObject ??= window.document;\n\n    const styinfo = zooflm.html_fragmentrenderer_get_style_information(\n        new zooflm.ZooHtmlFragmentRenderer()\n    );\n    const styElement = documentObject.createElement('style');\n    styElement.setAttribute('type', 'text/css');\n    styElement.innerText = `\n/* FLM - global */\n${ styinfo.css_global }\n/* FLM - content */\n${ styinfo.css_content }\n`;\n    documentObject.head.appendChild(styElement);\n\n    return styElement;\n}\n\n\n\n// -----------------------------------------------------------------------------\n\n\nexport function simpleRenderObjectWithFlm(zoodb, object_type, object_id, object)\n{\n    const zoo_flm_environment = zoodb.zoo_flm_environment;\n\n    const schema = zoodb.schemas[object_type];\n\n    debug(`renderObject(): ${object_type} ${object_id}`);\n\n    const render_doc_fn = (render_context) => {\n        const R = zooflm.make_render_shorthands({render_context});\n        const { ne, rdr, ref } = R;\n\n        let html = `<div class=\"object_render\">`;\n\n        html += sqzhtml`\n<h1>Object: ${object_type} <code>${object_id}</code></h1>\n`;\n\n        for (const {fieldname, fieldvalue, fieldschema}\n             of iter_object_fields_recursive(object, schema)) {\n            if (fieldvalue == null) {\n                continue;\n            }\n            let rendered = null;\n            try {\n                rendered = rdr(fieldvalue);\n            } catch (err) {\n                let errstr = null;\n                if (!err) { errstr = '??'; }\n                else if (typeof err === 'object' && '__class__' in err && 'msg' in err) {\n                    errstr = err.msg; //zooflm.repr(err);\n                } \n                else if (typeof err === 'object' && 'toString' in err) {\n                    errstr = ''+err;\n                }\n                else {\n                    errstr = '???';\n                }\n                rendered = `<span class=\"error\">(Render error: ${errstr})</span>`;\n            }\n            html += sqzhtml`\n<h2 class=\"fieldname\">${fieldname}</h2>\n<div class=\"fieldcontent\">\n${ rendered }\n</div>\n`;\n        }\n\n        html += `\n\n<RENDER_ENDNOTES/>\n\n`;\n        html += `</div>`;\n        return html;\n    };\n\n    return zooflm.make_and_render_document({\n        zoo_flm_environment,\n        render_doc_fn,\n        //doc_metadata,\n        render_endnotes: true,\n        flm_error_policy: 'continue',\n    });\n}\n\n"],"names":[],"version":3,"file":"all.js.map"}