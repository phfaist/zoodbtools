{"mappings":";;;;;AACA,MAAM,8BAAQ,CAAA,GAAA,YAAQ,EAAE;AAUjB,SAAS,0CAAoB,aAAE,SAAS,eAAE,WAAW,sBAAE,kBAAkB,EAAE;IAE9E,uBAAuB;IAEvB,kCAAkC;IAClC,MAAM,CAAE,gBAAgB,kBAAmB,GAAG,CAAA,GAAA,eAAO,EAAE;QACnD,6DAA6D;QAC7D,sEAAsE;QACtE,QAAQ;QACR,2DAA2D;QAC3D,OAAO;QACP,qDAAqD;QACrD,OAAO;QACP,mFAAmF;QACnF,UAAU;QACV,uEAAuE;QACvE,YAAY;QACZ,aAAa;IACjB;IAEA,4BAAM,CAAC,wBAAwB,CAAC,EAAE;IAElC,MAAM,8BAA8B,CAAC;QACjC,QAAQ,KACJ,EAAE;QACF,gDAAgD;QAChD,EAAE;QACF,CAAC;YACG,6DAA6D;YAC7D,6BAA6B;YAC7B,kBAAkB,CAAA,QAAU,CAAA;oBACxB,QAAQ;2BACR;oBACA,OAAO;oBACP,UAAU;oBACV,aAAa,MAAM,cAAc;gBACrC,CAAA;QACJ,GACA,EAAE;QACF,8CAA8C;QAC9C,EAAE;QACF,CAAC;YACG,QAAQ,MAAM,CAAC,6BAA6B,CAAC,EAAE;YAC/C,kBAAkB,CAAA,QAAU,CAAA;oBACxB,QAAQ;2BACR;oBACA,OAAO;oBACP,UAAU;oBACV,aAAa,MAAM;gBACvB,CAAA;QACJ;QAEJ,qEAAqE;QACrE,wEAAwE;QACxE,qEAAqE;QACrE,kBAAkB,CAAA,QAAU,CAAA;gBACxB,QAAQ;gBACR,OAAO;gBACP,OAAO;gBACP,UAAU;gBACV,aAAa,MAAM;YACvB,CAAA;IACJ;IAEA,MAAM,SAAS;QACX,4BAAM,CAAC,eAAe,CAAC;QACvB,IAAI,eAAe,UAAU,SAAS;YAClC,QAAQ,MACJ,CAAC,yEAAyE,CAAC;YAE/E;QACJ;QACA,IAAI,UAAU;QACd,4BAA4B;IAChC;IAEA,MAAM,WAAW;QACb,4BAAM,CAAC,iBAAiB,CAAC;QACzB,IAAI,eAAe,UAAU,UAAU;YACnC,QAAQ,MACJ,CAAC,iEAAiE,CAAC;YAEvE;QACJ;QACA,IAAI,UAAU,YAAY,eAAe;QACzC,4BAA4B;IAChC;IAEA,CAAA,GAAA,gBAAQ,EAAG;QACP,sCAAsC;QACtC,IAAI,eAAe,WAAW,WAAW,oBACrC;IAER;IAEA,2FAA2F;IAE3F,OAAO;QACH,QAAQ,eAAe;QAEvB,OAAO,eAAe;QAEtB,OAAO,eAAe;QAEtB,OAAO;QAEP,mEAAmE;QACnE,kEAAkE;QAClE,kBAAkB;QAClB,sBAAsB,IAAM;gBAAE,eAAe;gBAAQ,eAAe;aAAa;QAEjF,EAAE;QACF,uEAAuE;QACvE,qCAAqC;QACrC,EAAE;QACF,MAAM;QAEN,EAAE;QACF,kEAAkE;QAClE,4CAA4C;QAC5C,EAAE;QACF,QAAQ;IAEZ;AACJ","sources":["zoodbpreview/useZooDbAccessState.js"],"sourcesContent":["import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.useZooDbAccessState');\n\nimport React, { useState, useEffect } from 'react';\n\n\n/**\n * loadZooDb and reloadZooDb should be async functions.  The former returns a\n * freshly loaded ZooDb instance, the latter takes the zoodb to reload as its\n * only argument and returns the reloaded ZooDb instance.\n */\nexport function useZooDbAccessState({ loadZooDb, reloadZooDb, triggerInitialLoad })\n{\n    triggerInitialLoad ??= true;\n\n    // debug(`useZooDbAccessState()`);\n    const [ zooDbLoadState, setZooDbLoadState ] = useState({\n        // status = 'empty', 'loading', 'loaded', or 'load-error' (no\n        // 'reloading', we use status 'loading' also if the zoo is re-loading)\n        status: 'empty',\n        // the current ZooDb instance object, if status == 'loaded'\n        zoodb: null,\n        // the error that occurred, if status == 'load-error'\n        error: null,\n        // the promise that will resolve to a ZooDb instance object, if status == 'loading'\n        _promise: null,\n        // a flag that we increase to ensure the state changes after the zoo is\n        // reloaded.\n        loadVersion: 0,\n    });\n\n    debug(`useZooDbAccessState() - `, zooDbLoadState);\n\n    const doSetupLoadStateFromPromise = (promise) => {\n        promise.then(\n            //\n            // On promise accepted = zoo successfully loaded\n            //\n            (zoodb) => {\n                // once the zoodb is loaded, we set the state to 'loaded' and\n                // set the instance properly.\n                setZooDbLoadState(state => ({\n                    status: 'loaded',\n                    zoodb,\n                    error: null,\n                    _promise: null,\n                    loadVersion: state.loadVersion + 1,\n                }));\n            },\n            //\n            // On promise rejected = error loading the zoo\n            //\n            (error) => {\n                console.error(`Error while loading the zoo: `, error);\n                setZooDbLoadState(state => ({\n                    status: 'load-error',\n                    error,\n                    zoodb: null,\n                    _promise: null,\n                    loadVersion: state.loadVersion,\n                }));\n            }\n        );\n        // NOTE: Do NOT set the zoodb field in the temporary 'loading' state,\n        // because we don't want preview components accessing the zoodb instance\n        // while it is being modified.  Therefore, we use \"zoodb: null\" here:\n        setZooDbLoadState(state => ({\n            status: 'loading',\n            zoodb: null,\n            error: null,\n            _promise: promise,\n            loadVersion: state.loadVersion,\n        }));\n    };\n\n    const doLoad = () => {\n        debug(`Called doLoad()`);\n        if (zooDbLoadState.status != 'empty') {\n            console.error(\n                `useZooDbAccessState: Can't load() zoo, we've already loaded the zoo once.`\n            );\n            return;\n        }\n        let promise = loadZooDb();\n        doSetupLoadStateFromPromise(promise);\n    };\n\n    const doReload = () => {\n        debug(`Called doReload()`);\n        if (zooDbLoadState.status != 'loaded') {\n            console.error(\n                `useZooDbAccessState: Zoo isn't fully loaded yet, cannot reload().`\n            );\n            return;\n        }\n        let promise = reloadZooDb(zooDbLoadState.zoodb);\n        doSetupLoadStateFromPromise(promise);\n    };\n\n    useEffect( () => {\n        // debug(`useEffect function called`);\n        if (zooDbLoadState.status === 'empty' && triggerInitialLoad) {\n            doLoad();\n        }\n    } );\n\n    // debug(`useZooDbAccessState(); called useEffect(); about to return accessor object ...`);\n\n    return {\n        status: zooDbLoadState.status,\n\n        zoodb: zooDbLoadState.zoodb,\n\n        error: zooDbLoadState.error,\n\n        state: zooDbLoadState,\n\n        // can be used as a second argument in useEffect() etc. to flag for\n        // effects etc. that need to fire when the ZooDb load state and/or\n        // contents change\n        getStateDependencies: () => [ zooDbLoadState.status, zooDbLoadState.loadversion ],\n\n        //\n        // Remember not to call load() directly in a component body, but rather\n        // in an effect or an event callback!\n        //\n        load: doLoad,\n\n        //\n        // Remember not to call reload() directly in a component body, but\n        // rather in an effect or an event callback!\n        //\n        reload: doReload,\n        \n    };\n}\n\n\n"],"names":[],"version":3,"file":"useZooDbAccessState.js.map"}