{"mappings":"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","sources":["zoodbpreview/all.js","zoodbpreview/ZooDbPreviewContentComponent.jsx","zoodbpreview/ZooDbSelectObjectTypeAndIdComponent.jsx","zoodbpreview/ZooDbPreviewComponent.jsx","zoodbpreview/useZooDbAccessState.js","zoodbpreview/citationapiplaceholder.js","zoodbpreview/renderFlm.js"],"sourcesContent":["\n//\n// React components\n//\n\nexport {\n    useLoadPreviewContentEffect,\n    ZooDbPreviewContentBaseComponent,\n    ZooDbPreviewContentComponent,\n} from './ZooDbPreviewContentComponent.jsx';\nexport {\n    ZooDbSelectObjectTypeAndIdComponent\n} from './ZooDbSelectObjectTypeAndIdComponent.jsx';\nexport {\n    ZooDbPreviewComponent\n} from './ZooDbPreviewComponent.jsx';\n\n//\n// React state helper\n//\nexport { useZooDbAccessState } from './useZooDbAccessState.js';\n\n//\n// helpers\n//\n\nexport { CitationSourceApiPlaceholder } from './citationapiplaceholder.js';\n\nexport {\n    installFlmContentStyles, simpleRenderObjectWithFlm,\n    installZooFlmEnvironmentLinksAndGraphicsHandlers\n} from './renderFlm.js';\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbPreviewComponent');\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Select from 'react-select';\n\nimport './ZooDbPreviewContentComponent_style.scss';\n\n\n// Utility; cf. https://stackoverflow.com/a/4642894/1694896\nfunction getAncestor(node, tagName)\n{\n    tagName = tagName.toUpperCase();\n    while (node) {\n        if (node.nodeType == 1 && node.nodeName == tagName) {\n            return node;\n        }\n        node = node.parentNode;\n    }\n    return null;\n};\n\n\n\n\n// -----------------------------------------------------------------------------\n\n\n\nexport function useLoadPreviewContentEffect({\n    renderContent, getMathJax, onLinkClick,\n    reloadPreviewDependencies,\n    resetScrollPreviewDependencies,\n})\n{\n    let renderContentDomNodeRef = useRef(null);\n\n    const callbackDivClick = useCallback((event) => {\n        // debug(`Got click event on preview content <div>. `, event);\n\n        const a = getAncestor(event.target, \"a\");\n\n        // debug(`ancestor <a> → `, a);\n\n        if (a == null) {\n            return;\n        }\n\n        if (onLinkClick == null) {\n            // no custom callback for links\n            return;\n        }\n\n        const targetHref = a.getAttribute(\"href\");\n        if (!targetHref) {\n            // not a link, or we don't have a href=\"...\" attribute ??\n            return;\n        }\n\n        let targetInternalAnchor = null;\n        if (targetHref.startsWith(\"#\")) {\n            targetInternalAnchor = targetHref.slice(1);\n        }\n\n        debug(`Clicked on a link in <div> content preview →`,\n              { a, targetHref, targetInternalAnchor });\n        \n        return onLinkClick(event, { a, targetHref, targetInternalAnchor });\n    }, [onLinkClick]);\n\n    useEffect(\n        () => {\n            let cancelFlag = false;\n            let offloadCallbackFnList = [];\n            let callOffloadCallbackFns = () => {\n                if (offloadCallbackFnList.length > 0) {\n                    let flist = [...offloadCallbackFnList];\n                    offloadCallbackFnList = [];\n                    for (const f of flist) {\n                        try {\n                            f();\n                        } catch (err) {\n                            console.error(`Caught error in cleanup callback: `, err);\n                        }\n                    }\n                }\n            };\n            let registerRenderPreviewCleanupCallback = (callback) => {\n                if (callback) {\n                    offloadCallbackFnList.push(callback);\n                }\n            };\n\n            const renderAndTypesetContent = async () => {\n\n                const domNode = renderContentDomNodeRef.current;\n\n                domNode.addEventListener('click', callbackDivClick);\n                offloadCallbackFnList.push(\n                    () => domNode.removeEventListener('click', callbackDivClick)\n                );\n\n                //\n                // render the content\n                //\n                const { htmlContent } = await renderContent({\n                    registerRenderPreviewCleanupCallback,\n                });\n\n                if (cancelFlag) {\n                    callOffloadCallbackFns();\n                    return;\n                }\n\n                if (htmlContent != null) {\n                    domNode.innerHTML = htmlContent;\n\n                    let resetScroll = true;\n                    if (resetScrollPreviewDependencies) {\n                        let nodeDeps = JSON.parse(domNode.dataset.zoodbResetScrollDeps ?? \"[]\");\n                        resetScroll = resetScrollPreviewDependencies.reduce(\n                            (accum, value, index) => {\n                                return accum || (value !== nodeDeps[index]);\n                            },\n                            false\n                        );\n                        domNode.dataset.zoodbResetScrollDeps =\n                            JSON.stringify([...resetScrollPreviewDependencies]);\n                    }\n                    if (resetScroll) {\n                        //\n                        // scroll to the top of the preview pane\n                        //\n                        domNode.scrollTo({top: 0});\n                    }\n\n                    //\n                    // render math if applicable\n                    //\n                    if (getMathJax) {\n                        const MJ = getMathJax();\n                        if (MJ) {\n                            await MJ.typesetPromise([domNode]);\n                        }\n                    }\n                }\n\n                if (cancelFlag) {\n                    callOffloadCallbackFns();\n                    return;\n                }\n            };\n\n            renderAndTypesetContent();\n\n            return () => {\n                cancelFlag = true;\n                callOffloadCallbackFns();\n            };\n        },\n        [...reloadPreviewDependencies]\n    );\n\n    return { renderContentDomNodeRef };\n}\n\n\n\n\n// -----------------------------------------------------------------------------\n\n\nexport function ZooDbPreviewContentBaseComponent(props)\n{\n    const {\n        renderContent,\n        getMathJax,\n        onLinkClick,\n        //previewingZooVersion, // used to re-render component when zoo is updated\n    } = props;\n\n    const { renderContentDomNodeRef } = useLoadPreviewContentEffect({\n        renderContent, getMathJax, onLinkClick,\n\n    });\n\n    return (\n        <div className=\"zoodb-preview-content\" ref={renderContentDomNodeRef} />\n    );\n}\n\n\n\n// -----------------------------------------------------------------------------\n\n\nexport function ZooDbPreviewContentComponent(props)\n{\n    const {\n        zooDbAccessState,\n        objectType,\n        objectId,\n        renderObject,\n        getMathJax,\n        onLinkClick,\n        //previewingZooVersion, // used to re-render component when zoo is updated\n    } = props;\n\n    const renderContent = async ({ registerRenderPreviewCleanupCallback }) => {\n\n        const zoodb = zooDbAccessState.zoodb;\n\n        if (zoodb == null) {\n            // still loading (TODO; provide more information on loading state ...)\n            debug(`zoodb is null, the zoo is probably loading. Won't update preview for now.`);\n            return { htmlContent: null };\n        }\n\n        let object = null;\n        if (objectType && objectId && zoodb.objects[objectType]) {\n            object = zoodb.objects[objectType][objectId];\n        }\n\n        if (object != null) {\n            const result =\n                  await renderObject({zoodb, objectType, objectId, object,\n                                      registerRenderPreviewCleanupCallback});\n\n            debug(`Rendered object preview HTML → `, result);\n\n            return { htmlContent: result.htmlContent };\n        }\n\n        let pleaseSelectHtmlMessage = `\n<p>Please use the selection boxes above to select a zoo entry to display.</p>\n`.trim();\n        \n        debug(`Selection is probably incomplete, rendered user message`);\n\n        return { htmlContent: pleaseSelectHtmlMessage };\n    };\n    \n    const { renderContentDomNodeRef } = useLoadPreviewContentEffect({\n        renderContent, getMathJax, onLinkClick,\n        reloadPreviewDependencies:\n            [ objectType, objectId, zooDbAccessState.loadVersion ],\n        resetScrollPreviewDependencies: [ objectType, objectId ],\n    });\n\n    let previewMessages = null;\n\n    if (zooDbAccessState.status === 'loading') {\n        previewMessages = (\n            <>\n                <p className=\"info\">⏳ Loading, please wait ...</p>\n                <div className=\"info\">\n                    <p className=\"small-caption\">\n                        Please be patient while the zoo is loading.\n                        This task could take a few minutes!\n                    </p>\n                    <p className=\"small-caption\">\n                        You can open your browser's Javascript console to\n                        monitor progress.\n                    </p>\n                </div>\n            </>\n        );\n    } else if (zooDbAccessState.status === 'reloading') {\n        previewMessages = (\n            <>\n                <p className=\"info small-caption\">⏳ Reloading, please wait ...</p>\n            </>\n        );\n    } else if (zooDbAccessState.status === 'load-error') {\n        let errstr;\n        try {\n            errstr = ''+zooDbAccessState.error;\n        } catch (e) {\n            console.error(`Can't convert error to string: `, zooDbAccessState.error);\n            errstr = '(unknown error, cf. JavaScript console for details)'\n        }\n        previewMessages = (\n            <div className=\"error\">\n                <p>Error while loading the zoo!</p>\n                <p className=\"small-caption\">{errstr}</p>\n                <p className=\"small-caption\">\n                    Consult your browser's JavaScript console for additional\n                    information that might be helpful for debugging this issue.\n                </p>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <div className=\"zoodb-preview-messages\">{ previewMessages }</div>\n            <div className=\"zoodb-preview-content\" ref={renderContentDomNodeRef} />\n        </>\n    );\n}\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbSelectObjectTypeAndIdComponent');\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\n\nimport './ZooDbSelectObjectTypeAndIdComponent_style.scss';\n\n\n\n\nexport function ZooDbSelectObjectTypeAndIdComponent(props)\n{\n    let {\n        zoodb,\n        objectType,\n        objectId,\n        onChangeObjectTypeAndId,\n    } = props;\n\n    objectType ||= \"\";\n    objectId ||= \"\";\n\n    let isDisabled = true;\n    let selectObjectTypeOptions = [];\n    let selectObjectIdOptions = [];\n\n    if (zoodb != null) {\n\n        isDisabled = false;\n\n        let allObjectTypes = Object.keys(zoodb.objects);\n        allObjectTypes.sort();\n\n        selectObjectTypeOptions = allObjectTypes.map(\n            (x) => ({ value: x, label: x })\n        );\n        selectObjectTypeOptions.push(\n            { value: \"\", label: \"(select object type)\" }\n        )\n\n        if (objectType && zoodb.objects[objectType]) {\n            let allObjectIds = Object.keys(zoodb.objects[objectType]);\n            allObjectIds.sort();\n\n            selectObjectIdOptions = allObjectIds.map(\n                (x) => ({ value: x, label: x })\n            );\n        }\n        selectObjectIdOptions.push(\n            { value: \"\", label: \"(select object)\" }\n        );\n\n    }\n\n    return (\n        <div className=\"zoodb-preview-select-bar\">\n            <Select\n                className=\"zoodb-preview-select-objecttype\"\n                classNamePrefix=\"zoodb-preview-react-select\"\n                isDisabled={isDisabled}\n                value={{value: objectType, label: objectType}}\n                onChange={(newValue) => onChangeObjectTypeAndId(newValue.value, null)}\n                options={selectObjectTypeOptions}\n            />\n            <Select\n                className=\"zoodb-preview-select-objectid\"\n                classNamePrefix=\"zoodb-preview-react-select\"\n                isDisabled={isDisabled}\n                value={{value: objectId, label: objectId }}\n                onChange={(newValue) => onChangeObjectTypeAndId(objectType, newValue.value)}\n                options={selectObjectIdOptions}\n            />\n        </div>\n    );\n}\n\n\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbPreviewComponent');\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\n\nimport { ZooDbSelectObjectTypeAndIdComponent } from './ZooDbSelectObjectTypeAndIdComponent.jsx';\nimport { ZooDbPreviewContentComponent } from './ZooDbPreviewContentComponent.jsx';\nimport { useZooDbAccessState } from './useZooDbAccessState.js';\n\nimport './ZooDbPreviewComponent_style.scss';\n\n\n\n\nexport function ZooDbPreviewComponent(props)\n{\n    debug(`ZooDbPreviewComponent()`, { props });\n\n    let {\n        loadZooDb,\n        reloadZooDb,\n        renderObject,\n        initialObjectType,\n        initialObjectId,\n        getMathJax,\n        // incompleteSelectionRenderHtml,\n        // CommandButtonsComponent,\n        commandButtonsUseReload,\n        commandButtonsToggleDarkModeCallback,\n    } = props;\n\n    initialObjectType ||= \"\";\n    initialObjectId ||= \"\";\n\n    // React states and effects --\n\n    const [ selectedObjectTypeAndId, setSelectedObjectTypeAndId ] = useState(\n        {\n            objectType: initialObjectType,\n            objectId: initialObjectId,\n        }\n    );\n\n    //const [ previewingZooVersion, setPreviewingZooVersion ] = useState(0);\n\n    const zooDbAccess = useZooDbAccessState({\n        loadZooDb, reloadZooDb,\n        //triggerInitialLoad: true, // this is the default\n    });\n\n    debug(`got ZooDbAccess object: `, zooDbAccess);\n\n    // render --\n\n    const { objectType, objectId } = selectedObjectTypeAndId;\n\n    const onLinkClick = (event, { a, targetHref, targetInternalAnchor }) => {\n        if (targetInternalAnchor != null) {\n            const element = document.getElementById(targetInternalAnchor);\n            if (element != null) {\n                element.scrollIntoView(true);\n                element.classList.add(\"visual-highlight\");\n                setTimeout(\n                    () => element.classList.remove(\"visual-highlight\"),\n                    1000 // milliseconds\n                );\n                event.preventDefault();\n            }\n            return;\n        }\n        const url = new URL(targetHref);\n        debug(`Clicked on a link, url = `, url);\n        if (url.protocol.toLowerCase() === 'jsOnLinkClick:'.toLowerCase()) {\n            // meant to be captured by our callback\n            const action = url.pathname;\n            const q = JSON.parse(url.searchParams.get('q'));\n            if (action === 'objectLink') {\n                setSelectedObjectTypeAndId({objectType: q.objectType, objectId: q.objectId});\n                if (q.anchor) {\n                    // TODO: scroll to a certain anchor, if applicable.\n                    console.log(`Not yet implemented: scroll to #${q.anchor} after load`);\n                }\n                event.preventDefault();\n                return;\n            }\n            throw new Error(`Invalid internal jsOnLinkClick action: ‘${action}’`);\n        }\n        return;\n    };\n\n    let commandButtonsContents = [];\n\n    if (commandButtonsUseReload) {\n        const canReload = (\n            zooDbAccess.status === 'loaded'\n            || zooDbAccess.status === 'load-error'\n            || zooDbAccess.status === 'empty'\n        );\n        commandButtonsContents.push(\n            <button\n                onClick={() => zooDbAccess.reload()}\n                disabled={!canReload}\n            >RELOAD ZOO</button>\n        );\n    }\n    if (commandButtonsToggleDarkModeCallback != null\n        && commandButtonsToggleDarkModeCallback !== false) {\n        commandButtonsContents.push(\n            <button\n                onClick={(event) => commandButtonsToggleDarkModeCallback(event)}\n            >🌒</button>\n        );\n    }\n\n    if (commandButtonsContents.length > 0) {\n        commandButtonsContents = (\n            <div className=\"zoodb-preview-command-buttons\">\n                {commandButtonsContents}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"ZooDbPreviewComponent\">\n            <ZooDbSelectObjectTypeAndIdComponent\n                zoodb={zooDbAccess.zoodb}\n                objectType={selectedObjectTypeAndId.objectType}\n                objectId={selectedObjectTypeAndId.objectId}\n                onChangeObjectTypeAndId={\n                    (objectType, objectId) => setSelectedObjectTypeAndId({objectType, objectId})\n                }\n            />\n            <ZooDbPreviewContentComponent\n                zooDbAccessState={zooDbAccess.state}\n                objectType={objectType}\n                objectId={objectId}\n                renderObject={renderObject}\n                getMathJax={getMathJax}\n                onLinkClick={onLinkClick}\n            />\n            {commandButtonsContents}\n        </div>\n    );\n}\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.useZooDbAccessState');\n\nimport React, { useState, useEffect } from 'react';\n\n\n/**\n * loadZooDb and reloadZooDb should be async functions.  The former returns a\n * freshly loaded ZooDb instance, the latter takes the zoodb to reload as its\n * only argument and returns the reloaded ZooDb instance.\n */\nexport function useZooDbAccessState({ loadZooDb, reloadZooDb, triggerInitialLoad })\n{\n    triggerInitialLoad ??= true;\n\n    // debug(`useZooDbAccessState()`);\n    const [ zooDbLoadState, setZooDbLoadState ] = useState({\n        // status = 'empty', 'loading', 'loaded', 'reloading', or 'load-error'\n        // (the separate 'reloading' status is used so we can tailor the message\n        // to the user; since we expect reloads to be much quicker than initial\n        // loads)\n        status: 'empty',\n        // the current ZooDb instance object, if status == 'loaded'\n        zoodb: null,\n        // the error that occurred, if status == 'load-error'\n        error: null,\n        // the promise that will resolve to a ZooDb instance object, if status\n        // == 'loading' or status == 'reloading'\n        _promise: null,\n        // a flag that we increase to ensure the state changes after the zoo is\n        // reloaded.\n        loadVersion: 0,\n    });\n\n    debug(`useZooDbAccessState() - `, zooDbLoadState);\n\n    const doSetupLoadStateFromPromise = (promise, loadingStatus) => {\n        promise.then(\n            //\n            // On promise accepted = zoo successfully loaded\n            //\n            (zoodb) => {\n                // once the zoodb is loaded, we set the state to 'loaded' and\n                // set the instance properly.\n                setZooDbLoadState(state => ({\n                    status: 'loaded',\n                    zoodb,\n                    error: null,\n                    _promise: null,\n                    loadVersion: state.loadVersion + 1,\n                }));\n            },\n            //\n            // On promise rejected = error loading the zoo\n            //\n            (error) => {\n                console.error(`Error while loading the zoo: `, error);\n                setZooDbLoadState(state => ({\n                    status: 'load-error',\n                    error,\n                    zoodb: null,\n                    _promise: null,\n                    loadVersion: state.loadVersion,\n                }));\n            }\n        );\n        // NOTE: Do NOT set the zoodb field in the temporary 'loading' state,\n        // because we don't want preview components accessing the zoodb instance\n        // while it is being modified.  Therefore, we use \"zoodb: null\" here:\n        setZooDbLoadState(state => ({\n            status: loadingStatus,\n            zoodb: null,\n            error: null,\n            _promise: promise,\n            loadVersion: state.loadVersion,\n        }));\n    };\n\n    const doLoad = () => {\n        debug(`Called doLoad()`);\n        if (zooDbLoadState.status != 'empty') {\n            console.error(\n                `useZooDbAccessState: Can't load() zoo, we've already loaded the zoo once.`\n            );\n            return;\n        }\n        let promise = loadZooDb();\n        doSetupLoadStateFromPromise(promise, 'loading');\n    };\n\n    const doReload = () => {\n        debug(`Called doReload()`);\n        if (zooDbLoadState.status != 'loaded') {\n            console.error(\n                `useZooDbAccessState: Zoo isn't fully loaded yet, cannot reload().`\n            );\n            return;\n        }\n        let promise = reloadZooDb(zooDbLoadState.zoodb);\n        doSetupLoadStateFromPromise(promise, 'reloading');\n    };\n\n    useEffect( () => {\n        // debug(`useEffect function called`);\n        if (zooDbLoadState.status === 'empty' && triggerInitialLoad) {\n            doLoad();\n        }\n    } );\n\n    // debug(`useZooDbAccessState(); called useEffect(); about to return accessor object ...`);\n\n    return {\n        status: zooDbLoadState.status,\n\n        zoodb: zooDbLoadState.zoodb,\n\n        error: zooDbLoadState.error,\n\n        state: zooDbLoadState,\n\n        // can be used as a second argument in useEffect() etc. to flag for\n        // effects etc. that need to fire when the ZooDb load state and/or\n        // contents change\n        getStateDependencies: () => [ zooDbLoadState.status, zooDbLoadState.loadversion ],\n\n        //\n        // Remember not to call load() directly in a component body, but rather\n        // in an effect or an event callback!\n        //\n        load: doLoad,\n\n        //\n        // Remember not to call reload() directly in a component body, but\n        // rather in an effect or an event callback!\n        //\n        reload: doReload,\n        \n    };\n}\n\n\n","import { CitationSourceBase } from '@phfaist/zoodb/citationmanager/source/base';\n\n\nexport class CitationSourceApiPlaceholder extends CitationSourceBase\n{\n    constructor(options)\n    {\n        options ||= {};\n\n        const override_options = {\n            source_name: `${options.title} (placeholder)`,\n            chunk_size: Infinity,\n            chunk_retrieve_delay_ms: 0,\n\n            cache_store_options: {\n                    cache_duration_ms: 0,\n            },\n        };\n        const default_options = {\n            cite_prefix: options.cite_prefix,\n        };\n\n        super(\n            override_options,\n            options,\n            default_options,\n        );\n    }\n\n    async run_retrieve_chunk(id_list)\n    {\n        for (let cite_key of id_list) {\n            cite_key = cite_key.trim();\n            const cite_key_encoded = encodeURIComponent(cite_key);\n\n            let flm_text = `${this.options.title} \\\\verbcode{${cite_key}}`\n\n            let test_url = this.options.test_url(this.cite_prefix, cite_key);\n            if (test_url) {\n                flm_text += ` — \\\\href{${test_url}}{TEST→}`;\n            }\n\n            // clean up the data a bit, we don't need the full list of references (!)\n            let csljsondata = {\n                _ready_formatted: {\n                    flm: flm_text,\n                }\n            };\n\n            this.citation_manager.store_citation(\n                this.cite_prefix, cite_key, csljsondata, this.cache_store_options\n            );\n        }\n    }\n    \n}\n","import debugm from 'debug';\nconst debug = debugm('zoodbpreview.renderFlm');\n\nimport * as zooflm from '@phfaist/zoodb/zooflm';\nimport { getfield } from '@phfaist/zoodb/util/getfield';\nimport { iter_object_fields_recursive } from '@phfaist/zoodb/util/objectinspector';\nimport { sqzhtml } from '@phfaist/zoodb/util/sqzhtml';\nimport { split_prefix_label } from '@phfaist/zoodb/util/prefixlabel';\n\nimport mime from 'mime-types';\n\n\n// -----------------------------------------------------------------------------\n\n\nexport function installFlmContentStyles(documentObject)\n{\n    documentObject ??= window.document;\n\n    const styinfo = zooflm.html_fragmentrenderer_get_style_information(\n        new zooflm.ZooHtmlFragmentRenderer()\n    );\n    const styElement = documentObject.createElement('style');\n    styElement.setAttribute('type', 'text/css');\n    styElement.innerText = `\n/* FLM - global */\n${ styinfo.css_global }\n/* FLM - content */\n${ styinfo.css_content }\n`;\n    documentObject.head.appendChild(styElement);\n\n    return styElement;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\nexport function installZooFlmEnvironmentLinksAndGraphicsHandlers(\n    zoo_flm_environment,\n    { getGraphicsFileContents }\n)\n{\n    zoo_flm_environment.graphics_collection.src_url_resolver_fn =\n        ({graphics_resource, render_context, source_path}) => {\n\n            const imageData = getGraphicsFileContents(\n                graphics_resource.source_info.resolved_source,\n                { graphics_resource, render_context, source_path }\n            );\n            let mimeType = mime.lookup(\n                graphics_resource.source_info.resolved_source\n            );\n            if (!mimeType) { mimeType = 'image/*'; }\n            const blob = new Blob([ imageData ], { type: mimeType });\n\n            const src_url = URL.createObjectURL(blob);\n\n            debug(`created Blob Object Url ${src_url}`);\n\n            if (render_context.registerRenderPreviewCleanupCallback != null) {\n                render_context.registerRenderPreviewCleanupCallback(\n                    () => {\n                        URL.revokeObjectURL(src_url);\n                        debug(`revoked Blob Object Url ${src_url}`);\n                    }\n                );\n            } else {\n                console.warn(\n                    `Allocated a Blob URL with URL.createObjectURL(), but there was no `\n                    + `registerRenderPreviewCleanupCallback set to register the URL `\n                    + `to be revoked/freed after use`\n                );\n            }\n\n            return { src_url };\n        }\n    ;\n\n    //\n    // Override links to other objects, so we can intercept them.\n    //\n    zoo_flm_environment.ref_resolver.target_href_resolver =\n        (ref_instance, render_context) => {\n\n            const { target_href, ref_type, ref_label } = ref_instance ?? {};\n\n            if (target_href != null) {\n                // maybe fix target_href?\n                const url = new URL(target_href);\n                if (url.protocol == 'zoodbobjectref:') {\n                    // this is a reference set by zoodb/zooflm/zooprocessor.js\n                    //\n                    // [Note, we seem to get all the slashes as part of the\n                    // pathname in \"protocol:///code/ref\" when running in the\n                    // browser]\n                    const objectRef = url.pathname.replace(/^\\/+/, '');\n\n                    const [objectType, objectId] = split_prefix_label(objectRef);\n                    let qData = {\n                        objectType, objectId,\n                    };\n                    if (url.hash && url.hash.startsWith('#')) {\n                        qData.anchor = decodeURIComponent(url.hash.slice(1));\n                    }\n                    return (`jsOnLinkClick:objectLink`\n                            + `?q=${encodeURIComponent(JSON.stringify(qData))}`);\n                }\n                return target_href;\n            }\n            \n            const alertMsg = `Could not resolve link reference to ‘${ref_type}:${ref_label}’`;\n            return(`javascript:alert(${JSON.stringify(alertMsg)}`);\n        }\n    ;\n\n}\n\n\n\n// -----------------------------------------------------------------------------\n\n\nexport function simpleRenderObjectWithFlm({\n    zoodb, objectType, objectId, object,\n    registerRenderPreviewCleanupCallback,\n})\n{\n    const zoo_flm_environment = zoodb.zoo_flm_environment;\n\n    const schema = zoodb.schemas[objectType];\n\n    debug(`renderObject(): ${objectType} ${objectId}`);\n\n    const render_doc_fn = (render_context) => {\n        const R = zooflm.make_render_shorthands({render_context});\n        const { ne, rdr, ref } = R;\n\n        render_context.registerRenderPreviewCleanupCallback =\n            registerRenderPreviewCleanupCallback;\n\n        let html = `<article class=\"object_render\">`;\n\n        html += sqzhtml`\n<h1>Object: ${objectType} <code>${objectId}</code></h1>\n`;\n\n        for (const {fieldname, fieldvalue, fieldschema}\n             of iter_object_fields_recursive(object, schema)) {\n            if (fieldvalue == null) {\n                continue;\n            }\n            let rendered = null;\n            try {\n                rendered = rdr(fieldvalue);\n            } catch (err) {\n                let errstr = null;\n                if (!err) { errstr = '??'; }\n                else if (typeof err === 'object' && '__class__' in err && 'msg' in err) {\n                    errstr = err.msg; //zooflm.repr(err);\n                } \n                else if (typeof err === 'object' && 'toString' in err) {\n                    errstr = ''+err;\n                }\n                else {\n                    errstr = '???';\n                }\n                rendered = `<span class=\"error\">(Render error: ${errstr})</span>`;\n            }\n            html += sqzhtml`\n<h2 class=\"fieldname\">${fieldname}</h2>\n<div class=\"fieldcontent\">\n${ rendered }\n</div>\n`;\n        }\n\n        html += `\n\n<RENDER_ENDNOTES/>\n\n`;\n        html += `</article>`;\n        return html;\n    };\n\n    let htmlContent = zooflm.make_and_render_document({\n        zoo_flm_environment,\n        render_doc_fn,\n        //doc_metadata,\n        render_endnotes: true,\n        flm_error_policy: 'continue',\n    });\n\n    return {\n        htmlContent,\n    };\n}\n\n"],"names":[],"version":3,"file":"all.js.map"}