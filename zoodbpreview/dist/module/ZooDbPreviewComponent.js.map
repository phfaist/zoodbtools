{"mappings":"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","sources":["zoodbpreview/ZooDbPreviewComponent.jsx","zoodbpreview/ZooDbSelectObjectTypeAndIdComponent.jsx","zoodbpreview/ZooDbPreviewContentComponent.jsx"],"sourcesContent":["import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbPreviewComponent');\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\n\nimport { ZooDbSelectObjectTypeAndIdComponent } from './ZooDbSelectObjectTypeAndIdComponent.jsx';\nimport { ZooDbPreviewContentComponent } from './ZooDbPreviewContentComponent.jsx';\n\nimport './ZooDbPreviewComponent_style.scss';\n\n\n\n\nexport function ZooDbPreviewComponent(props)\n{\n    debug(`ZooDbPreviewComponent()`, { props });\n\n    let {\n        loadZooDb,\n        reloadZooDb,\n        renderObject,\n        initialObjectType,\n        initialObjectId,\n        getMathJax,\n        // incompleteSelectionRenderHtml,\n        // CommandButtonsComponent,\n        commandButtonsUseReload,\n        commandButtonsToggleDarkModeCallback,\n    } = props;\n\n    initialObjectType ||= \"\";\n    initialObjectId ||= \"\";\n\n    // React states and effects --\n\n    const [ selectedObjectTypeAndId, setSelectedObjectTypeAndId ] = useState(\n        {\n            objectType: initialObjectType,\n            objectId: initialObjectId,\n        }\n    );\n\n    //const [ previewingZooVersion, setPreviewingZooVersion ] = useState(0);\n\n    const zoodbAccess = useZooDbAccessState({\n        loadZooDb, reloadZooDb,\n        //triggerInitialLoad: true, // this is the default\n    });\n\n    debug(`got ZooDbAccess object: `, zoodbAccess);\n\n    // render --\n\n    let theContentComponent = null;\n\n    let object = null;\n\n    const { objectType, objectId } = selectedObjectTypeAndId;\n\n    const onLinkClick = (event, { a, targetHref, targetInternalAnchor }) => {\n        if (targetInternalAnchor != null) {\n            const element = document.getElementById(targetInternalAnchor);\n            if (element != null) {\n                element.scrollIntoView(true);\n                event.preventDefault();\n            }\n            return;\n        }\n        const url = new URL(targetHref);\n        if (url.protocol == 'jsOnLinkClick:') {\n            // meant to be captured by our callback\n            const action = url.pathname;\n            const q = JSON.parse(url.searchParams.get('q'));\n            if (action === 'objectLink') {\n                setSelectedObjectTypeAndId(q);\n                event.preventDefault();\n                return;\n            }\n            throw new Error(`Invalid internal jsOnLinkClick action: â€˜${action}â€™`);\n        }\n        return;\n    };\n\n    const zoodb = zoodbAccess.zoodb;\n\n    if (zoodb == null) {\n        // still loading (TODO; provide more information on loading state ...)\n        return (\n            <div>Loading, please wait...</div>\n        );\n    }\n\n    if (objectType && objectId && zoodb.objects[objectType]) {\n        object = zoodb.objects[objectType][objectId];\n        const renderZooObjectContent = () => {\n            return renderObject(zoodb, objectType, objectId, object);\n        };\n        theContentComponent = (\n            <ZooDbPreviewContentComponent\n                renderContent={renderZooObjectContent}\n                getMathJax={getMathJax}\n                onLinkClick={onLinkClick}\n            />\n        )\n    }\n    if (!object) {\n        let msgHtml = null;\n        // if (incompleteSelectionRenderHtml != null) {\n        //     msgHtml = incompleteSelectionRenderHtml(\n        //         zoodb, selectedObjectType, selectedObjectId\n        //     );\n        // } else {\n        msgHtml = `Please select an object to preview using the selection boxes above.`\n        // }\n        debug(`Rendered HTML for incomplete selection -> `, { msgHtml });\n        theContentComponent = (\n                <div className=\"zoodb-preview-content\"\n                     dangerouslySetInnerHtml={ {__html: msgHtml } } />\n        );\n    }\n\n    let commandButtonsContents = [];\n\n    if (commandButtonsUseReload) {\n        commandButtonsContents.push(\n            <button onClick={() => zoodbAccess.reload()}>RELOAD ZOO</button>\n        );\n    }\n    if (commandButtonsToggleDarkModeCallback != null\n        && commandButtonsToggleDarkModeCallback !== false) {\n        commandButtonsContents.push(\n            <button\n                onClick={(event) => commandButtonsToggleDarkModeCallback(event)}\n            >ðŸŒ’</button>\n        );\n    }\n\n    if (commandButtonsContents.length > 0) {\n        commandButtonsContents = (\n            <div className=\"zoodb-preview-command-buttons\">\n                {commandButtonsContents}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"ZooDbPreviewComponent\">\n            <ZooDbSelectObjectTypeAndIdComponent\n                zoodb={zoodb}\n                objectType={selectedObjectTypeAndId.objectType}\n                objectId={selectedObjectTypeAndId.objectId}\n                onChangeObjectTypeAndId={\n                    (objectType, objectId) => setSelectedObjectTypeAndId({objectType, objectId})\n                }\n            />\n            {commandButtonsContents}\n            {theContentComponent}\n        </div>\n    );\n}\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbSelectObjectTypeAndIdComponent');\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\n\nimport './ZooDbSelectObjectTypeAndIdComponent_style.scss';\n\n\n\n\nexport function ZooDbSelectObjectTypeAndIdComponent(props)\n{\n    let {\n        zoodb,\n        objectType,\n        objectId,\n        onChangeObjectTypeAndId,\n    } = props;\n\n    objectType ||= \"\";\n    objectId ||= \"\";\n\n    let isDisabled = true;\n    let selectObjectTypeOptions = [];\n    let selectObjectIdOptions = [];\n\n    if (zoodb != null) {\n\n        isDisabled = false;\n\n        let allObjectTypes = Object.keys(zoodb.objects);\n        allObjectTypes.sort();\n\n        selectObjectTypeOptions = allObjectTypes.map(\n            (x) => ({ value: x, label: x })\n        );\n        selectObjectTypeOptions.push(\n            { value: \"\", label: \"(select object type)\" }\n        )\n\n        if (objectType && zoodb.objects[objectType]) {\n            let allObjectIds = Object.keys(zoodb.objects[objectType]);\n            allObjectIds.sort();\n\n            selectObjectIdOptions = allObjectIds.map(\n                (x) => ({ value: x, label: x })\n            );\n        }\n        selectObjectIdOptions.push(\n            { value: \"\", label: \"(select object)\" }\n        );\n\n    }\n\n    return (\n        <div className=\"zoodb-preview-select-bar\">\n            <Select\n                className=\"zoodb-preview-select-objecttype\"\n                classNamePrefix=\"zoodb-preview-react-select\"\n                isDisabled={isDisabled}\n                value={{value: objectType, label: objectType}}\n                onChange={(newValue) => onChangeObjectTypeAndId(newValue.value, null)}\n                options={selectObjectTypeOptions}\n            />\n            <Select\n                className=\"zoodb-preview-select-objectid\"\n                classNamePrefix=\"zoodb-preview-react-select\"\n                isDisabled={isDisabled}\n                value={{value: objectId, label: objectId }}\n                onChange={(newValue) => onChangeObjectTypeAndId(objectType, newValue.value)}\n                options={selectObjectIdOptions}\n            />\n        </div>\n    );\n}\n\n\n","import debug_mod from 'debug';\nconst debug = debug_mod('zoodbtoolspreview.ZooDbPreviewComponent');\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\n\nimport './ZooDbPreviewContentComponent_style.scss';\n\n\n\nexport function ZooDbPreviewContentComponent(props)\n{\n    const {\n        renderContent,\n        getMathJax,\n        onLinkClick,\n        //previewingZooVersion, // used to re-render component when zoo is updated\n    } = props;\n\n    let renderContentDomNodeRef = useRef(null);\n\n    useEffect(\n        () => {\n            let cancelFlag = false;\n\n            const renderAndTypesetContent = async () => {\n\n                const domNode = renderContentDomNodeRef.current;\n\n                //\n                // scroll to the top of the preview pane\n                //\n                domNode.scrollTo({top: 0});\n\n                //\n                // render the content\n                //\n                const previewHtml = await renderContent();\n\n                if (cancelFlag) { return; }\n\n                domNode.innerHTML = previewHtml;\n\n                //\n                // render math if applicable\n                //\n                if (getMathJax) {\n                    const MJ = getMathJax();\n                    if (MJ) {\n                        await MJ.typesetPromise([domNode]);\n                    }\n                }\n            };\n\n            renderAndTypesetContent();\n\n            return () => { cancelFlag = true; };\n        }\n    );\n\n\n    const callbackDivClick = (event) => {\n        const a = getAncestor(event.target, \"a\");\n        if (a == null) {\n            return;\n        }\n\n        if (onLinkClick == null) {\n            // no custom callback for links\n            return;\n        }\n\n        const targetHref = a.getAttribute(\"href\");\n        if (!targetHref) {\n            // not a link, or we don't have a href=\"...\" attribute ??\n            return;\n        }\n\n        let targetInternalAnchor = null;\n        if (targetHref.startsWith(\"#\")) {\n            targetInternalAnchor = targetHref.slice(1);\n        }\n        \n        return onLinkClick(event, { a, targetHref, targetInternalAnchor });\n    };\n\n\n    //       dangerouslySetInnerHTML={ {__html: previewHtml} }\n\n    return (\n        <div className=\"zoodb-preview-content\"\n             ref={renderContentDomNodeRef}\n             onClick={callbackDivClick}\n        />\n    );\n}\n"],"names":[],"version":3,"file":"ZooDbPreviewComponent.js.map"}