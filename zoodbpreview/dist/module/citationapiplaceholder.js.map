{"mappings":";;;AAGO,MAAM,kDAAqC,CAAA,GAAA,yBAAiB;IAE/D,YAAY,OAAO,CACnB;QACI,YAAY,CAAC;QAEb,MAAM,mBAAmB;YACrB,aAAa,CAAC,EAAE,QAAQ,MAAM,cAAc,CAAC;YAC7C,YAAY;YACZ,yBAAyB;YAEzB,qBAAqB;gBACb,mBAAmB;YAC3B;QACJ;QACA,MAAM,kBAAkB;YACpB,aAAa,QAAQ;YAErB,0BAA0B,CAAC;QAC/B;QAEA,KAAK,CACD,kBACA,SACA;QAGJ,IAAI,CAAC,2BAA2B,IAAI,CAAC,QAAQ,4BAA4B,CAAC;IAC9E;IAEA,MAAM,mBAAmB,OAAO,EAChC;QACI,KAAK,IAAI,YAAY,QAAS;YAC1B,WAAW,SAAS;YACpB,MAAM,mBAAmB,mBAAmB;YAE5C,MAAM,cACA,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YACtE,IAAI,eAAe,MAAM;gBACrB,MAAM,2BAA2B,YAAY,OAAO;gBACpD,IAAI,0BAA0B;oBAC1B,IAAI,CAAC,iBAAiB,eAClB,IAAI,CAAC,aAAa,UAClB;wBAAE,kBAAkB;4BAAE,KAAK;wBAAyB;oBAAE,GACtD,IAAI,CAAC;oBAET;gBACJ;YACJ;YAEA,IAAI,WAAW;YACf,IAAI,OAAO,IAAI,CAAC,QAAQ,UAAU,YAC9B,WAAW,IAAI,CAAC,QAAQ,MAAM;iBAE9B,WAAW,CAAC,EAAE,IAAI,CAAC,QAAQ,MAAM,YAAY,EAAE,SAAS,CAAC,CAAC;YAG9D,IAAI,WAAW,IAAI,CAAC,QAAQ,SAAS,IAAI,CAAC,aAAa;YACvD,IAAI,UACA,YAAY,CAAC,UAAU,EAAE,SAAS,QAAQ,CAAC;YAG/C,IAAI,cAAc;gBACd,kBAAkB;oBACd,KAAK;gBACT;YACJ;YAEA,IAAI,CAAC,iBAAiB,eAClB,IAAI,CAAC,aAAa,UAAU,aAAa,IAAI,CAAC;QAEtD;IACJ;AAEJ","sources":["zoodbpreview/citationapiplaceholder.js"],"sourcesContent":["import { CitationSourceBase } from '@phfaist/zoodb/citationmanager/source/base';\n\n\nexport class CitationSourceApiPlaceholder extends CitationSourceBase\n{\n    constructor(options)\n    {\n        options ||= {};\n\n        const override_options = {\n            source_name: `${options.title} (placeholder)`,\n            chunk_size: Infinity,\n            chunk_retrieve_delay_ms: 0,\n\n            cache_store_options: {\n                    cache_duration_ms: 0,\n            },\n        };\n        const default_options = {\n            cite_prefix: options.cite_prefix,\n\n            search_in_compiled_cache: {}\n        };\n\n        super(\n            override_options,\n            options,\n            default_options,\n        );\n\n        this.search_in_compiled_cache = this.options.search_in_compiled_cache ?? {};\n    }\n\n    async run_retrieve_chunk(id_list)\n    {\n        for (let cite_key of id_list) {\n            cite_key = cite_key.trim();\n            const cite_key_encoded = encodeURIComponent(cite_key);\n            \n            const cached_info =\n                  this.search_in_compiled_cache[`${this.cite_prefix}:${cite_key}`];\n            if (cached_info != null) {\n                const cached_compiled_flm_text = cached_info.value?.citation_text;\n                if (cached_compiled_flm_text) {\n                    this.citation_manager.store_citation(\n                        this.cite_prefix, cite_key,\n                        { _ready_formatted: { flm: cached_compiled_flm_text } },\n                        this.cache_store_options\n                    );\n                    continue;\n                }\n            }\n\n            let flm_text = null;\n            if (typeof this.options.title === 'function') {\n                flm_text = this.options.title(cite_key);\n            } else {\n                flm_text = `${this.options.title} \\\\verbcode{${cite_key}}`;\n            }\n\n            let test_url = this.options.test_url(this.cite_prefix, cite_key);\n            if (test_url) {\n                flm_text += ` — \\\\href{${test_url}}{TEST→}`;\n            }\n\n            let csljsondata = {\n                _ready_formatted: {\n                    flm: flm_text,\n                }\n            };\n\n            this.citation_manager.store_citation(\n                this.cite_prefix, cite_key, csljsondata, this.cache_store_options\n            );\n        }\n    }\n    \n}\n"],"names":[],"version":3,"file":"citationapiplaceholder.js.map"}