{"mappings":"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","sources":["zoodbgitpreview/ZooDbGithubRepoPreviewComponent.jsx","zoodbgitpreview/GithubRepoSelector.jsx"],"sourcesContent":["import path from 'path';\n\nimport debugm from 'debug';\nconst debug = debugm('zoodbgitpreview.ZooDbGithubRepoPreviewComponent');\n\nimport git from 'isomorphic-git';\nimport gitHttp from 'isomorphic-git/http/web/index.js';\n\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { ZooDbPreviewComponent } from '@phfaist/zoodbtools_preview';\n\n\nimport { GithubRepoSelector } from './GithubRepoSelector.jsx';\n\nimport './ZooDbGithubRepoPreviewComponent_style.scss';\n\n\nwindow.git = git;\nwindow.gitHttp = gitHttp;\n\n\nexport function ZooDbGithubRepoPreviewComponent(props)\n{\n    let {\n        githubUser,\n        githubRepo,\n        allowChoosePullRequest,\n        fs,\n        loadZooDbFromFsDir,\n        mainBranchName,\n        fsWorkDir,\n        initialObjectType,\n        initialObjectId,\n        commandButtonsUseReload,\n        commandButtonsToggleDarkModeCallback,\n        renderObject,\n        getMathJax,\n    } = props;\n\n    allowChoosePullRequest ??= true;\n    fsWorkDir ??= \"/git-work\"\n    mainBranchName ??= 'main'\n    let fsRepoDir = `${fsWorkDir}/${githubUser}-${githubRepo}`\n\n    commandButtonsUseReload ??= false;\n\n    const [ gitBranch, setGitBranch ] = useState({\n         branch: mainBranchName,\n         userLoadVersion: 0,\n    });\n\n    // to help with in-browser debugging\n    window.fsRepoDir = fsRepoDir;\n    window.githubUser = githubUser;\n    window.githubRepo = githubRepo;\n\n    const doGitCheckoutAppropriateVersion = async () => {\n\n        //\n        // fetch and checkout the relevant git branch in\n        //\n\n        let gitRemoteRef = mainBranchName;\n        //let gitRef = mainBranchName;\n        if (gitBranch.pullRequestNumber != null) {\n            gitRemoteRef = `pull/${gitBranch.pullRequestNumber}/head`;\n            //gitRef = `pr-${gitBranch.pullRequestNumber}`;\n        }\n\n        debug(`Calling git.fetch()`, { gitRemoteRef, //gitRef,\n                                      gitBranch });\n\n        let fetchResult = await git.fetch({\n            fs,\n            http: gitHttp,\n            dir: fsRepoDir,\n            corsProxy: 'https://cors.isomorphic-git.org',\n            url: `https://github.com/${githubUser}/${githubRepo}.git`,\n            remoteRef: gitRemoteRef,\n            ref: gitRemoteRef, //gitRef,\n            singleBranch: true,\n            depth: 1, // NOT 0 !!!\n\n            //author: { name: 'git-preview-test', email: 'noemail@example.com' },\n        });\n\n        // and do 'git checkout' for the appropriate version\n\n        debug(`Calling git.checkout() to checkout ${fetchResult.fetchHead} `\n              + `(${fetchResult.fetchHeadDescription})`);\n\n        await git.checkout({\n            fs,\n            dir: fsRepoDir,\n            ref: fetchResult.fetchHead,\n        });\n\n    };\n\n\n    const loadZooDb = async () => {\n        \n        // see if we have our special marker in the folder\n        let needsClone = true;\n        const metaInfoFileName = path.join(fsRepoDir, '_zoodbgitpreview_git_repo.json');\n        try {\n            let data = await fs.promises.readFile(metaInfoFileName);\n            let d = JSON.parse(data);\n            if (d.githubUser === githubUser && d.githubRepo === githubRepo) {\n                needsClone = false;\n            }\n        } catch (err) {\n            debug(`Couldn't read ${metaInfoFileName}, will do a fresh repository clone`);\n        }\n\n        if (needsClone) {\n\n            // Clear up any existing work dir folder\n            await fs.promises.rm(fsRepoDir, { recursive: true });\n\n            debug(`About to git clone...`);\n\n            await git.clone({\n                fs,\n                http: gitHttp,\n                dir: fsRepoDir,\n                corsProxy: 'https://cors.isomorphic-git.org',\n                url: `https://github.com/${githubUser}/${githubRepo}.git`,\n                ref: mainBranchName,\n                singleBranch: true,\n                depth: 1, // NOT 0 !!!\n            });\n\n            await fs.promises.writeFile(metaInfoFileName, JSON.stringify(\n                { githubUser, githubRepo }\n            ));\n            \n            debug(`Cloned repository.  Folder ${fsRepoDir} now -> `,\n                await fs.promises.readdir(`${fsRepoDir}`));\n\n        } else {\n\n            await doGitCheckoutAppropriateVersion();\n\n        }\n\n        let zoodb = await loadZooDbFromFsDir({ fsRepoDir });\n    \n        // for in-browser debugging\n        window.zoodb = zoodb;\n\n        return zoodb;\n    };\n\n    const reloadZooDb = async (zoodb) => {\n\n        debug(`Called reloadZooDb()`);\n\n        await doGitCheckoutAppropriateVersion();\n\n        // now, initiate a zoo reload.\n\n        debug(`Reloading the zoo now`);\n        \n        await zoodb.load();\n\n        return zoodb;\n    };\n\n    debug(`In ZooDbGithubRepoPreviewComponent render, gitBranch is`, gitBranch);\n\n    //\n    // Render the component\n    //\n    return (\n        <ZooDbPreviewComponent\n            loadZooDb={loadZooDb}\n            reloadZooDb={reloadZooDb}\n            renderObject={renderObject}\n            getMathJax={getMathJax}\n            initialObjectType={initialObjectType}\n            initialObjectId={initialObjectId}\n            commandButtonsUseReload={commandButtonsUseReload}\n            commandButtonsToggleDarkModeCallback={commandButtonsToggleDarkModeCallback}\n            userLoadVersion={gitBranch.userLoadVersion}\n            >\n            <GithubRepoSelector\n                githubUser={githubUser}\n                githubRepo={githubRepo}\n                gitBranch={gitBranch}\n                mainBranchName={mainBranchName}\n                allowChoosePullRequest={allowChoosePullRequest}\n                onGitBranchSelected={\n                    (newGitBranch) => setGitBranch({...newGitBranch, userLoadVersion: gitBranch.userLoadVersion+1})\n                }\n            />\n        </ZooDbPreviewComponent>\n    );\n\n\n}\n","import debugm from 'debug';\nconst debug = debugm('zoodbgitpreview.GithubRepoSelector');\n\nimport React from 'react';\n\nimport './GithubRepoSelector_style.scss';\n\nexport function GithubRepoSelector(props)\n{\n    const {\n        githubUser,\n        githubRepo,\n        mainBranchName,\n        gitBranch,\n        onGitBranchSelected,\n    } = props;\n\n    debug('rendering github repo selector');\n\n    let showBranchText = '??';\n    if (gitBranch.branch) {\n        showBranchText = gitBranch.branch;\n    } else if (gitBranch.pullRequestNumber) {\n        showBranchText = `PR #${gitBranch.pullRequestNumber}`;\n    }\n\n    const btnClicked = (event) => {\n        const prText = document.getElementById('show-gh-select-input-pull-request').value;\n        if (prText != null && prText != \"\") {\n            // we seem to have selected a PR\n            let pullRequestNumber = parseInt(prText);\n            if (typeof pullRequestNumber === 'number' && pullRequestNumber > 0) {\n                debug('pr selected!', { pullRequestNumber });\n                onGitBranchSelected({ pullRequestNumber, });\n            } else {\n                alert(`Please enter a pull request number to view`);\n            }\n        } else {\n            alert(`Please enter a pull request number to view`);\n        }\n    };\n    const btnMainClicked = (event) => {\n        onGitBranchSelected({ branch: mainBranchName });\n    };\n    return (\n        <div className=\"GithubRepoSelector\">\n            <span className=\"show-gh-repo-combo\">\n                <span className=\"show-gh-user\">{githubUser}</span>\n                {\":\"}\n                <span className=\"show-gh-repo\">{githubRepo}</span>\n                {\" [\"}\n                <span className=\"show-gh-branch\">{showBranchText}</span>\n                {\"]\"}\n            </span>\n            <span className=\"show-gh-pick show-gh-pick-pr\">\n                <label htmlFor=\"show-gh-select-input-pull-request\">View Pull Request #:</label>\n                <input type=\"text\" id=\"show-gh-select-input-pull-request\" />\n                <button onClick={btnClicked}>Go to PR!</button>\n            </span>\n            <span className=\"show-gh-pick show-gh-pick-main-branch\">\n                <button onClick={btnMainClicked}>Go to main branch</button>\n            </span>\n        </div>\n    );\n}"],"names":[],"version":3,"file":"ZooDbGithubRepoPreviewComponent.js.map"}